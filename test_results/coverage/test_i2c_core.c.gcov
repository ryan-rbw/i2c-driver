        -:    0:Source:unit/test_i2c_core.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <assert.h>
        -:    5:
        -:    6:#include "../test_common.h"
        -:    7:
        -:    8:struct test_case {
        -:    9:	const char *name;
        -:   10:	int (*test_func)(void);
        -:   11:};
        -:   12:
        1:   13:static int test_device_creation(void)
        -:   14:{
        -:   15:	struct i2c_a78_dev *dev;
        1:   16:	struct device mock_device = {0};
        -:   17:	
        1:   18:	printf("Testing device creation...\n");
        -:   19:	
        1:   20:	dev = devm_kzalloc(&mock_device, sizeof(*dev), GFP_KERNEL);
       1*:   21:	assert(dev != NULL);
        -:   22:	
        1:   23:	dev->dev = &mock_device;
        1:   24:	dev->bus_freq = I2C_A78_SPEED_FAST;
        1:   25:	dev->timeout_ms = I2C_A78_TIMEOUT_MS;
        -:   26:	
       1*:   27:	assert(dev->bus_freq == 400000);
       1*:   28:	assert(dev->timeout_ms == 1000);
        -:   29:	
        1:   30:	printf("✓ Device creation test passed\n");
        1:   31:	return 0;
        -:   32:}
        -:   33:
        1:   34:static int test_register_access(void)
        -:   35:{
        -:   36:	struct i2c_a78_dev *dev;
        1:   37:	struct device mock_device = {0};
        1:   38:	void *base_addr = (void *)0x1000;
        -:   39:	
        1:   40:	printf("Testing register access...\n");
        -:   41:	
        1:   42:	dev = devm_kzalloc(&mock_device, sizeof(*dev), GFP_KERNEL);
       1*:   43:	assert(dev != NULL);
        -:   44:	
        1:   45:	dev->base = base_addr;
        1:   46:	mock_reset_registers();
        -:   47:	
        1:   48:	i2c_a78_writel(dev, 0x12345678, I2C_A78_CONTROL);
        1:   49:	u32 value = i2c_a78_readl(dev, I2C_A78_CONTROL);
        -:   50:	
       1*:   51:	assert(value == 0x12345678);
        -:   52:	
        1:   53:	i2c_a78_writel(dev, 0xABCDEF00, I2C_A78_STATUS);
        1:   54:	value = i2c_a78_readl(dev, I2C_A78_STATUS);
        -:   55:	
       1*:   56:	assert(value == 0xABCDEF00);
        -:   57:	
        1:   58:	printf("✓ Register access test passed\n");
        1:   59:	return 0;
        -:   60:}
        -:   61:
        1:   62:static int test_speed_configuration(void)
        -:   63:{
        -:   64:	struct i2c_a78_dev *dev;
        1:   65:	struct device mock_device = {0};
        -:   66:	
        1:   67:	printf("Testing speed configuration...\n");
        -:   68:	
        1:   69:	dev = devm_kzalloc(&mock_device, sizeof(*dev), GFP_KERNEL);
       1*:   70:	assert(dev != NULL);
        -:   71:	
        -:   72:	assert(I2C_A78_SPEED_STD == 100000);
        -:   73:	assert(I2C_A78_SPEED_FAST == 400000);
        -:   74:	assert(I2C_A78_SPEED_FAST_PLUS == 1000000);
        -:   75:	assert(I2C_A78_SPEED_HIGH == 3400000);
        -:   76:	
        1:   77:	printf("✓ Speed configuration test passed\n");
        1:   78:	return 0;
        -:   79:}
        -:   80:
        1:   81:static int test_bit_definitions(void)
        -:   82:{
        1:   83:	printf("Testing bit definitions...\n");
        -:   84:	
        -:   85:	assert(I2C_A78_CONTROL_MASTER_EN == BIT(0));
        -:   86:	assert(I2C_A78_CONTROL_SPEED_STD == (0 << 1));
        -:   87:	assert(I2C_A78_CONTROL_SPEED_FAST == (1 << 1));
        -:   88:	assert(I2C_A78_CONTROL_INT_EN == BIT(3));
        -:   89:	
        -:   90:	assert(I2C_A78_STATUS_BUSY == BIT(0));
        -:   91:	assert(I2C_A78_STATUS_ARB_LOST == BIT(1));
        -:   92:	assert(I2C_A78_STATUS_NACK == BIT(2));
        -:   93:	assert(I2C_A78_STATUS_TX_DONE == BIT(3));
        -:   94:	
        -:   95:	assert(I2C_A78_COMMAND_START == BIT(0));
        -:   96:	assert(I2C_A78_COMMAND_STOP == BIT(1));
        -:   97:	assert(I2C_A78_COMMAND_READ == BIT(2));
        -:   98:	assert(I2C_A78_COMMAND_WRITE == BIT(3));
        -:   99:	
        1:  100:	printf("✓ Bit definitions test passed\n");
        1:  101:	return 0;
        -:  102:}
        -:  103:
        1:  104:static int test_dma_structure(void)
        -:  105:{
        -:  106:	struct i2c_a78_dev *dev;
        1:  107:	struct device mock_device = {0};
        -:  108:	
        1:  109:	printf("Testing DMA structure...\n");
        -:  110:	
        1:  111:	dev = devm_kzalloc(&mock_device, sizeof(*dev), GFP_KERNEL);
       1*:  112:	assert(dev != NULL);
        -:  113:	
        1:  114:	dev->dma.use_dma = false;
        1:  115:	dev->dma.buf_len = PAGE_SIZE;
        -:  116:	
       1*:  117:	assert(dev->dma.use_dma == false);
       1*:  118:	assert(dev->dma.buf_len == 4096);
        -:  119:	
        1:  120:	printf("✓ DMA structure test passed\n");
        1:  121:	return 0;
        -:  122:}
        -:  123:
        1:  124:static int test_statistics_structure(void)
        -:  125:{
        -:  126:	struct i2c_a78_dev *dev;
        1:  127:	struct device mock_device = {0};
        -:  128:	
        1:  129:	printf("Testing statistics structure...\n");
        -:  130:	
        1:  131:	dev = devm_kzalloc(&mock_device, sizeof(*dev), GFP_KERNEL);
       1*:  132:	assert(dev != NULL);
        -:  133:	
        1:  134:	dev->stats.tx_bytes = 100;
        1:  135:	dev->stats.rx_bytes = 200;
        1:  136:	dev->stats.timeouts = 1;
        1:  137:	dev->stats.arb_lost = 2;
        1:  138:	dev->stats.nacks = 3;
        -:  139:	
       1*:  140:	assert(dev->stats.tx_bytes == 100);
       1*:  141:	assert(dev->stats.rx_bytes == 200);
       1*:  142:	assert(dev->stats.timeouts == 1);
       1*:  143:	assert(dev->stats.arb_lost == 2);
       1*:  144:	assert(dev->stats.nacks == 3);
        -:  145:	
        1:  146:	printf("✓ Statistics structure test passed\n");
        1:  147:	return 0;
        -:  148:}
        -:  149:
        1:  150:static int test_address_handling(void)
        -:  151:{
        1:  152:	printf("Testing address handling...\n");
        -:  153:	
        1:  154:	u32 addr_7bit = 0x48;
        1:  155:	u32 addr_10bit = 0x123;
        -:  156:	
       1*:  157:	assert((addr_7bit & I2C_A78_ADDRESS_7BIT_MASK) == 0x48);
       1*:  158:	assert((addr_10bit & I2C_A78_ADDRESS_10BIT_MASK) == 0x123);
        -:  159:	
        1:  160:	u32 addr_10bit_enabled = addr_10bit | I2C_A78_ADDRESS_10BIT_EN;
       1*:  161:	assert((addr_10bit_enabled & I2C_A78_ADDRESS_10BIT_EN) != 0);
        -:  162:	
        1:  163:	printf("✓ Address handling test passed\n");
        1:  164:	return 0;
        -:  165:}
        -:  166:
        1:  167:static int test_fifo_status(void)
        -:  168:{
        1:  169:	printf("Testing FIFO status...\n");
        -:  170:	
        1:  171:	u32 status = 0x0A05; // TX level = 5, RX level = 10
        -:  172:	
        1:  173:	u32 tx_level = status & I2C_A78_FIFO_STATUS_TX_LEVEL_MASK;
        1:  174:	u32 rx_level = (status & I2C_A78_FIFO_STATUS_RX_LEVEL_MASK) >> I2C_A78_FIFO_STATUS_RX_LEVEL_SHIFT;
        -:  175:	
       1*:  176:	assert(tx_level == 5);
       1*:  177:	assert(rx_level == 10);
        -:  178:	assert(I2C_A78_FIFO_SIZE == 16);
        -:  179:	
        1:  180:	printf("✓ FIFO status test passed\n");
        1:  181:	return 0;
        -:  182:}
        -:  183:
        -:  184:static struct test_case test_cases[] = {
        -:  185:	{"Device Creation", test_device_creation},
        -:  186:	{"Register Access", test_register_access},
        -:  187:	{"Speed Configuration", test_speed_configuration},
        -:  188:	{"Bit Definitions", test_bit_definitions},
        -:  189:	{"DMA Structure", test_dma_structure},
        -:  190:	{"Statistics Structure", test_statistics_structure},
        -:  191:	{"Address Handling", test_address_handling},
        -:  192:	{"FIFO Status", test_fifo_status},
        -:  193:	{NULL, NULL}
        -:  194:};
        -:  195:
        1:  196:int main(void)
        -:  197:{
        1:  198:	int passed = 0;
        1:  199:	int total = 0;
        -:  200:	
        1:  201:	printf("=== I2C A78 Core Unit Tests ===\n\n");
        -:  202:	
        9:  203:	for (struct test_case *tc = test_cases; tc->name != NULL; tc++) {
        8:  204:		printf("Running test: %s\n", tc->name);
        -:  205:		
        8:  206:		if (tc->test_func() == 0) {
        8:  207:			passed++;
        -:  208:		} else {
    #####:  209:			printf("✗ Test '%s' FAILED\n", tc->name);
        -:  210:		}
        -:  211:		
        8:  212:		total++;
        8:  213:		printf("\n");
        -:  214:	}
        -:  215:	
        1:  216:	printf("=== Test Summary ===\n");
        1:  217:	printf("Passed: %d/%d\n", passed, total);
        -:  218:	
        1:  219:	if (passed == total) {
        1:  220:		printf("All tests PASSED! ✓\n");
        1:  221:		return 0;
        -:  222:	} else {
    #####:  223:		printf("Some tests FAILED! ✗\n");
    #####:  224:		return 1;
        -:  225:	}
        -:  226:}
